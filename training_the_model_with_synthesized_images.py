# -*- coding: utf-8 -*-
"""Training the model with equal number of male and female

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K_2X2nFs4MN19qm2aBe2WaGko56aOSjV
"""

from google.colab import drive

drive.mount('/content/gdrive')

import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import pathlib
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.python.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.regularizers import l2
from keras import backend as K
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array
import pandas as pd
import shutil
import re
import zipfile
from collections import Counter

with zipfile.ZipFile('/content/gdrive/MyDrive/UTKFace.zip','r') as zip_ref:
  zip_ref.extractall('content/gdrive/MyDrive/UTKFace_unzipped')

with zipfile.ZipFile('/content/gdrive/MyDrive/RAF-corrected-genders.zip','r') as zip_ref:
    zip_ref.extractall('content/gdrive/MyDrive/RAF-corrected-genders-unzipped')

utk_dir = 'content/gdrive/MyDrive/UTKFace_unzipped/UTKFace/UTKFace'
raf_dir = 'content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders'
utk_df = pd.read_csv('/content/gdrive/MyDrive/UTK_labels_with_ranges.csv')

utk_df['Name'] = utk_df['Name'] + '.jpg'

print('female: ', len(os.listdir('content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders/female')))
print('male: ', len(os.listdir('content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders/male')))

8182-6206

"""I need **1976** male images."""

random_male_df = utk_df[
    utk_df['Gender'] == 'Male'
].sample(n = 1976, random_state = 42)


images_list = np.array(random_male_df['Name'])

random_male_df.head(1)

images_list

for image in images_list:
    raf_male_dir = os.path.join(raf_dir, 'male')

    source_path = os.path.join(utk_dir, image)
    destination_path = os.path.join(raf_male_dir, image)
    shutil.copyfile(source_path, destination_path)

print('female: ', len(os.listdir('content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders/female')))
print('male: ', len(os.listdir('content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders/male')))

# folder_path = 'content/gdrive/MyDrive/UTK-I'
# if not os.path.exists(folder_path):
#     os.makedirs(folder_path)

# folder_path = 'content/gdrive/MyDrive/UTK-I/male'
# if not os.path.exists(folder_path):
#     os.makedirs(folder_path)

# folder_path = 'content/gdrive/MyDrive/UTK-I/female'
# if not os.path.exists(folder_path):
#     os.makedirs(folder_path)

# for image in images_list:
#     utk_male_dir = 'content/gdrive/MyDrive/UTK-I/male'

#     source_path = os.path.join(utk_dir, image)
#     destination_path = os.path.join(utk_male_dir, image)
#     shutil.copyfile(source_path, destination_path)



for image in images_list:
  gender = utk_df.loc[utk_df['Name'] == image, 'Gender'].values[0]
  print(gender)
  break







gender = df.loc[df['file_name'] == file_name, 'gender'].values[0]

print(f"The gender corresponding to file '{file_name}' is '{gender}'.")



# for image in images_list:
    # raf_male_dir = os.path.join(raf_dir, 'male')

    # source_path = os.path.join(utk_dir, image)
    # destination_path = os.path.join(raf_male_dir, image)
    # shutil.copyfile(source_path, destination_path)

# for filename in os.listdir(os.path.join(raf_dir, 'male')):
    # if filename in images_list:
        # file_path = os.path.join(os.path.join(raf_dir, 'male'), filename)
        # os.remove(file_path)

print(len(os.listdir(os.path.join(raf_dir, 'male'))))
print(len(os.listdir(os.path.join(raf_dir, 'female'))))

dataset_path = raf_dir
# additional_data_dir = 'content/gdrive/MyDrive/UTK-I'

data_dir = pathlib.Path(dataset_path)

img_height,img_width=100,100
batch_size=16
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names

image_count = {class_name: 0 for class_name in class_names}

for images, labels in train_ds:
    for label in labels:
        class_name = class_names[label]
        image_count[class_name] += 1

for class_name, count in image_count.items():
    print(f"Images from {class_name}: {count}")

6561-6531

# additional_ds = tf.keras.preprocessing.image_dataset_from_directory(
#   additional_data_dir,
#   validation_split=None,
#   seed=123,
#   image_size=(img_height, img_width),
#   batch_size=batch_size)

# train_ds = train_ds.concatenate(additional_ds)

# class_names = sorted(os.listdir(data_dir))

# image_count = {class_name: 0 for class_name in class_names}

# for images, labels in train_ds:
#     for label in labels:
#         class_name = class_names[label]
#         image_count[class_name] += 1

# for class_name, count in image_count.items():
#     print(f"Images from {class_name}: {count}")

resnet_model = Sequential()

pretrained_model= tf.keras.applications.ResNet50(include_top=False,
                   input_shape=(100,100,3),
                   pooling='avg',
                   weights='imagenet')
# for layer in pretrained_model.layers:
        # layer.trainable=False

# print(len(pretrained_model.layers))

for layer in pretrained_model.layers[:-15]:
    layer.trainable = False

resnet_model.add(pretrained_model)
resnet_model.add(Flatten())
resnet_model.add(Dense(512, activation='relu'))
# resnet_model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.01)))
# resnet_model.add(Dropout(0.5))
# resnet_model.add(BatchNormalization())
resnet_model.add(Dense(256, activation='relu'))
# resnet_model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.01)))
# resnet_model.add(Dropout(0.5))
# resnet_model.add(BatchNormalization())
# resnet_model.add(Dense(128, activation='relu'))
# resnet_model.add(Dropout(0.7))
# resnet_model.add(BatchNormalization())
# resnet_model.add(Dense(64, activation='relu'))
# resnet_model.add(Dropout(0.7))
# resnet_model.add(BatchNormalization())
resnet_model.add(Dense(2, activation='sigmoid'))

resnet_model.summary()

resnet_model.compile(optimizer=Adam(lr=0.001111510225611776),loss='sparse_categorical_crossentropy',metrics=['accuracy'])

epochs=20
history = resnet_model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs
)

fig1 = plt.gcf()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.axis(ymin=0.4,ymax=1)
plt.grid()
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'validation'])
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.grid()
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'validation'])
plt.show()

def predicted_gender(gender, filepath):
    img_path = '/content/gdrive/MyDrive/RAF-corrected-genders-unzipped/RAF-corrected-genders/' + gender + '/' + filepath

    img = image.load_img(img_path, target_size=(100, 100))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    preds = resnet_model.predict(x)

    predicted_class = np.argmax(preds)

    if(predicted_class == 0):
      return 'female'
    else:
      return 'male'

for image_path in val_ds.file_paths:
    string = image_path

    new_string = re.sub(r'_aligned.*\.jpg', '_aligned.jpg', string)

    print(new_string)
    break

    # if my_count[new_string] != 'male' and my_count[new_string] != 'female':
      # continue

    # gender_cnt_val_ds.append(my_count[new_string])

















